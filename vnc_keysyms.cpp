#include "vnc_keysyms.h"
#include "vnc_keysyms_unicode.h"


static struct
{
	uint32_t X;
	SDLKey SDL;
}
XKeysymToSDLKey[] =
{
	{ XK_BackSpace, SDLK_BACKSPACE },
	{ XK_Tab, SDLK_TAB },
	{ XK_Clear, SDLK_CLEAR },
	{ XK_Return, SDLK_RETURN },
	{ XK_Pause, SDLK_PAUSE },
	{ XK_Scroll_Lock, SDLK_SCROLLOCK },
	{ XK_Sys_Req, SDLK_SYSREQ },
	{ XK_Escape, SDLK_ESCAPE },
	{ XK_Delete, SDLK_DELETE },
	{ XK_Home, SDLK_HOME },
	{ XK_Left, SDLK_LEFT },
	{ XK_Up, SDLK_UP },
	{ XK_Right, SDLK_RIGHT },
	{ XK_Down, SDLK_DOWN },
	{ XK_Page_Up, SDLK_PAGEUP },
	{ XK_Page_Down, SDLK_PAGEDOWN },
	{ XK_End, SDLK_END },
	{ XK_Begin, SDLK_HOME },
	{ XK_Print, SDLK_PRINT },
	{ XK_Insert, SDLK_INSERT },
	{ XK_Undo, SDLK_UNDO },
	{ XK_Menu, SDLK_MENU },
	{ XK_Help, SDLK_HELP },
	{ XK_Break, SDLK_BREAK },
	{ XK_Mode_switch, SDLK_MODE },
	{ XK_Num_Lock, SDLK_NUMLOCK },
	{ XK_KP_Space, SDLK_SPACE },
	{ XK_KP_Enter, SDLK_KP_ENTER },
	{ XK_KP_Home, SDLK_KP7 },
	{ XK_KP_Left, SDLK_KP4 },
	{ XK_KP_Up, SDLK_KP8 },
	{ XK_KP_Right, SDLK_KP6 },
	{ XK_KP_Down, SDLK_KP2 },
	{ XK_KP_Page_Up, SDLK_KP9 },
	{ XK_KP_Page_Down, SDLK_KP3 },
	{ XK_KP_End, SDLK_KP1 },
	{ XK_KP_Begin, SDLK_KP7 },
	{ XK_KP_Insert, SDLK_KP0 },
	{ XK_KP_Delete, SDLK_KP_PERIOD },
	{ XK_KP_Equal, SDLK_KP_EQUALS },
	{ XK_KP_Multiply, SDLK_KP_MULTIPLY },
	{ XK_KP_Add, SDLK_KP_PLUS },
	{ XK_KP_Subtract, SDLK_KP_MINUS },
	{ XK_KP_Divide, SDLK_KP_DIVIDE },
	{ XK_KP_0, SDLK_KP0 },
	{ XK_KP_1, SDLK_KP1 },
	{ XK_KP_2, SDLK_KP2 },
	{ XK_KP_3, SDLK_KP3 },
	{ XK_KP_4, SDLK_KP4 },
	{ XK_KP_5, SDLK_KP5 },
	{ XK_KP_6, SDLK_KP6 },
	{ XK_KP_7, SDLK_KP7 },
	{ XK_KP_8, SDLK_KP8 },
	{ XK_KP_9, SDLK_KP9 },
	{ XK_F1, SDLK_F1 },
	{ XK_F2, SDLK_F2 },
	{ XK_F3, SDLK_F3 },
	{ XK_F4, SDLK_F4 },
	{ XK_F5, SDLK_F5 },
	{ XK_F6, SDLK_F6 },
	{ XK_F7, SDLK_F7 },
	{ XK_F8, SDLK_F8 },
	{ XK_F9, SDLK_F9 },
	{ XK_F10, SDLK_F10 },
	{ XK_F11, SDLK_F11 },
	{ XK_F12, SDLK_F12 },
	{ XK_F13, SDLK_F13 },
	{ XK_F14, SDLK_F14 },
	{ XK_F15, SDLK_F15 },
/*
	{ XK_F16, SDLK_F16 },
	{ XK_F17, SDLK_F17 },
	{ XK_F18, SDLK_F18 },
	{ XK_F19, SDLK_F19 },
	{ XK_F20, SDLK_F20 },
	{ XK_F21, SDLK_F21 },
	{ XK_F22, SDLK_F22 },
	{ XK_F23, SDLK_F23 },
	{ XK_F24, SDLK_F24 },
*/
	{ XK_Shift_L, SDLK_LSHIFT },
	{ XK_Shift_R, SDLK_RSHIFT },
	{ XK_Control_L, SDLK_LCTRL },
	{ XK_Control_R, SDLK_RCTRL },
	{ XK_Caps_Lock, SDLK_CAPSLOCK },
	{ XK_Meta_L, SDLK_LMETA },
	{ XK_Meta_R, SDLK_RMETA },
	{ XK_Alt_L, SDLK_LALT },
	{ XK_Alt_R, SDLK_RALT },
	{ XK_Super_L, SDLK_LSUPER },
	{ XK_Super_R, SDLK_RSUPER },
	// ASCII table, starting from 20 = space and ending with 126 = tilde
	{ 20, (SDLKey)20 },
	{ 21, (SDLKey)21 },
	{ 22, (SDLKey)22 },
	{ 23, (SDLKey)23 },
	{ 24, (SDLKey)24 },
	{ 25, (SDLKey)25 },
	{ 26, (SDLKey)26 },
	{ 27, (SDLKey)27 },
	{ 28, (SDLKey)28 },
	{ 29, (SDLKey)29 },
	{ 30, (SDLKey)20 },
	{ 31, (SDLKey)31 },
	{ 32, (SDLKey)32 },
	{ 33, (SDLKey)33 },
	{ 34, (SDLKey)34 },
	{ 35, (SDLKey)35 },
	{ 36, (SDLKey)36 },
	{ 37, (SDLKey)37 },
	{ 38, (SDLKey)38 },
	{ 39, (SDLKey)39 },
	{ 40, (SDLKey)40 },
	{ 41, (SDLKey)41 },
	{ 42, (SDLKey)42 },
	{ 43, (SDLKey)43 },
	{ 44, (SDLKey)44 },
	{ 45, (SDLKey)45 },
	{ 46, (SDLKey)46 },
	{ 47, (SDLKey)47 },
	{ 48, (SDLKey)48 },
	{ 49, (SDLKey)49 },
	{ 50, (SDLKey)50 },
	{ 51, (SDLKey)51 },
	{ 52, (SDLKey)52 },
	{ 53, (SDLKey)53 },
	{ 54, (SDLKey)54 },
	{ 55, (SDLKey)55 },
	{ 56, (SDLKey)56 },
	{ 57, (SDLKey)57 },
	{ 58, (SDLKey)58 },
	{ 59, (SDLKey)59 },
	{ 60, (SDLKey)60 },
	{ 61, (SDLKey)61 },
	{ 62, (SDLKey)62 },
	{ 63, (SDLKey)63 },
	{ 64, (SDLKey)64 },
	{ 65, (SDLKey)65 },
	{ 66, (SDLKey)66 },
	{ 67, (SDLKey)67 },
	{ 68, (SDLKey)68 },
	{ 69, (SDLKey)69 },
	{ 70, (SDLKey)70 },
	{ 71, (SDLKey)71 },
	{ 72, (SDLKey)72 },
	{ 73, (SDLKey)73 },
	{ 74, (SDLKey)74 },
	{ 75, (SDLKey)75 },
	{ 76, (SDLKey)76 },
	{ 77, (SDLKey)77 },
	{ 78, (SDLKey)78 },
	{ 79, (SDLKey)79 },
	{ 80, (SDLKey)80 },
	{ 81, (SDLKey)81 },
	{ 82, (SDLKey)82 },
	{ 83, (SDLKey)83 },
	{ 84, (SDLKey)84 },
	{ 85, (SDLKey)85 },
	{ 86, (SDLKey)86 },
	{ 87, (SDLKey)87 },
	{ 88, (SDLKey)88 },
	{ 89, (SDLKey)89 },
	{ 90, (SDLKey)90 },
	{ 91, (SDLKey)91 },
	{ 92, (SDLKey)92 },
	{ 93, (SDLKey)93 },
	{ 94, (SDLKey)94 },
	{ 95, (SDLKey)95 },
	{ 96, (SDLKey)96 },
	{ 97, (SDLKey)97 },
	{ 98, (SDLKey)98 },
	{ 99, (SDLKey)99 },
	{ 100, (SDLKey)100 },
	{ 101, (SDLKey)101 },
	{ 102, (SDLKey)102 },
	{ 103, (SDLKey)103 },
	{ 104, (SDLKey)104 },
	{ 105, (SDLKey)105 },
	{ 106, (SDLKey)106 },
	{ 107, (SDLKey)107 },
	{ 108, (SDLKey)108 },
	{ 109, (SDLKey)109 },
	{ 110, (SDLKey)110 },
	{ 111, (SDLKey)111 },
	{ 112, (SDLKey)112 },
	{ 113, (SDLKey)113 },
	{ 114, (SDLKey)114 },
	{ 115, (SDLKey)115 },
	{ 116, (SDLKey)116 },
	{ 117, (SDLKey)117 },
	{ 118, (SDLKey)118 },
	{ 119, (SDLKey)119 },
	{ 120, (SDLKey)120 },
	{ 121, (SDLKey)121 },
	{ 122, (SDLKey)122 },
	{ 123, (SDLKey)123 },
	{ 124, (SDLKey)124 },
	{ 125, (SDLKey)125 },
	{ 126, (SDLKey)126 },
	// End
	{ 0, (SDLKey)0 }
};

static std::map<uint32_t, SDLKey> initVncKeysymsSDL()
{
	std::map<uint32_t, SDLKey> ret;
	for( int i = 0; XKeysymToSDLKey[i].X != 0; i++ )
		ret[XKeysymToSDLKey[i].X] = XKeysymToSDLKey[i].SDL;
	return ret;
}

static std::map<uint32_t, uint32_t> initVncKeysymsUnicode()
{
	std::map<uint32_t, uint32_t> ret;
	for( int i = 0; XKeysymToUnicode[i].X != 0; i++ )
		if( XKeysymToUnicode[i].unicode >= 0x80 ) // ASCII keysyms already handled by vncKeysymToSDLKey
			ret[XKeysymToUnicode[i].X] = XKeysymToUnicode[i].unicode;
	return ret;
}

std::map<uint32_t, SDLKey> vncKeysymToSDLKey = initVncKeysymsSDL();
std::map<uint32_t, uint32_t> vncKeysymToUnicode = initVncKeysymsUnicode();
